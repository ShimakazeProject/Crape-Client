using System.Collections.Generic;
using System.IO;

namespace Crape_Client.CrapeClientCore
{
    class Spawn
    {
        public string SpawnPath { get => SpawnPath_; }
        private string SpawnPath_;
        #region 属性
        public Settings_ Settings { get; set; }
        public SpawnLocations_ SpawnLocations { get; set; }
        public HouseCountries_ HouseCountries { get; set; }
        public HouseColors_ HouseColors { get; set; }
        public HouseHandicaps_ HouseHandicaps { get; set; }
        public Tunnel_ Tunnel { get; set; }

        public Other_ Other1 { get; set; }
        public Other_ Other2 { get; set; }
        public Other_ Other3 { get; set; }
        public Other_ Other4 { get; set; }
        public Other_ Other5 { get; set; }
        public Other_ Other6 { get; set; }
        public Other_ Other7 { get; set; }
        public Alliances_ Multi1_Alliances { get; set; }
        public Alliances_ Multi2_Alliances { get; set; }
        public Alliances_ Multi3_Alliances { get; set; }
        public Alliances_ Multi4_Alliances { get; set; }
        public Alliances_ Multi5_Alliances { get; set; }
        public Alliances_ Multi6_Alliances { get; set; }
        public Alliances_ Multi7_Alliances { get; set; }
        public Alliances_ Multi8_Alliances { get; set; }
        #endregion 属性
        private FileStream fs;
        private StreamWriter sw;
        public Spawn()
        {
            SpawnPath_ = Global.Globals.LocalPath + "spawn.ini";
            Init();
        }
        private void Init()
        {
            Settings = new Settings_();
            SpawnLocations = new SpawnLocations_();
            HouseCountries = new HouseCountries_();
            HouseColors = new HouseColors_();
            HouseHandicaps = new HouseHandicaps_();
            Tunnel = new Tunnel_();
            Other1 = new Other_();
            Other2 = new Other_();
            Other3 = new Other_();
            Other4 = new Other_();
            Other5 = new Other_();
            Other6 = new Other_();
            Other7 = new Other_();
            Multi1_Alliances = new Alliances_();
            Multi2_Alliances = new Alliances_();
            Multi3_Alliances = new Alliances_();
            Multi4_Alliances = new Alliances_();
            Multi5_Alliances = new Alliances_();
            Multi6_Alliances = new Alliances_();
            Multi7_Alliances = new Alliances_();
            Multi8_Alliances = new Alliances_();
        }
        public void Make()
        {
            fs = new FileStream(SpawnPath, FileMode.Create);
            sw = new StreamWriter(fs);
            sw.Write("; generated by Crape Client\r\n");
            #region Settings
            sw.Write("[Settings]\r\n");
            Writer("Name", Settings.Name);
            Writer("CustomLoadScreen", Settings.CustomLoadScreen);
            Writer("SaveGameName", Settings.SaveGameName);
            Writer("UIGameMode", Settings.UIGameMode);
            Writer("UIMapName", Settings.UIMapName);
            Writer("MapHash", Settings.MapHash);
            Writer("Scenario", Settings.Scenario);

            Writer("UnitCount", Settings.UnitCount);
            Writer("GameSpeed", Settings.GameSpeed);
            Writer("TechLevel", Settings.TechLevel);
            Writer("AIPlayers", Settings.AIPlayers);
            Writer("AIDifficulty", Settings.AIDifficulty);
            Writer("Side", Settings.Side);
            Writer("Color", Settings.Color);
            Writer("DifficultyModeComputer", Settings.DifficultyModeComputer);
            Writer("DifficultyModeHuman", Settings.DifficultyModeHuman);
            Writer("PlayerCount", Settings.PlayerCount);
            Writer("GameMode", Settings.GameMode);
            Writer("Credits", Settings.Credits);
            Writer("GameID", Settings.GameID);
            Writer("Seed", Settings.Seed);
            Writer("Port", Settings.Port);

            Writer("LoadSaveGame", Settings.LoadSaveGame);
            Writer("ShortGame", Settings.ShortGame);
            Writer("Creates", Settings.Creates);
            Writer("AlliesAllowed", Settings.AlliesAllowed);
            Writer("MultiEngineer", Settings.MultiEngineer);
            Writer("MCVRedeploy", Settings.MCVRedeploy);
            Writer("FogOfWar", Settings.FogOfWar);
            Writer("BridgeDestroy", Settings.BridgeDestroy);
            Writer("AutoDeployMCV", Settings.AutoDeployMCV);
            Writer("SkipScoreScreen", Settings.SkipScoreScreen);
            Writer("IsSinglePlayer", Settings.IsSinglePlayer);
            Writer("Firestorm", Settings.Firestorm);
            Writer("BuildOffAlly", Settings.BuildOffAlly);
            Writer("IsSpectator", Settings.IsSpectator);
            Writer("Bases", Settings.Bases);
            Writer("SidebarHack", Settings.SidebarHack);
            Writer("Host", Settings.Host);
            Writer("Superweapons", Settings.Superweapons);
            Writer("AttackNeutralUnits", Settings.AttackNeutralUnits);
            sw.Write("\r\n\r\n");
            #endregion
            if (SpawnLocations.Used)
            {
                sw.Write("[SpawnLocations]\r\n");
                Writer("Multi1", SpawnLocations.Multi1);
                Writer("Multi2", SpawnLocations.Multi2);
                Writer("Multi3", SpawnLocations.Multi3);
                Writer("Multi4", SpawnLocations.Multi4);
                Writer("Multi5", SpawnLocations.Multi5);
                Writer("Multi6", SpawnLocations.Multi6);
                Writer("Multi7", SpawnLocations.Multi7);
                Writer("Multi8", SpawnLocations.Multi8);
                sw.Write("\r\n\r\n");
            }
            if (HouseCountries.Used)
            {
                sw.Write("[HouseCountries]\r\n");
                Writer("Multi2", HouseCountries.Multi2);
                Writer("Multi3", HouseCountries.Multi3);
                Writer("Multi4", HouseCountries.Multi4);
                Writer("Multi5", HouseCountries.Multi5);
                Writer("Multi6", HouseCountries.Multi6);
                Writer("Multi7", HouseCountries.Multi7);
                Writer("Multi8", HouseCountries.Multi8);
                sw.Write("\r\n\r\n");
            }
            if (HouseColors.Used)
            {
                sw.Write("[HouseColors]\r\n");
                Writer("Multi2", HouseColors.Multi2);
                Writer("Multi3", HouseColors.Multi3);
                Writer("Multi4", HouseColors.Multi4);
                Writer("Multi5", HouseColors.Multi5);
                Writer("Multi6", HouseColors.Multi6);
                Writer("Multi7", HouseColors.Multi7);
                Writer("Multi8", HouseColors.Multi8);
                sw.Write("\r\n\r\n");
            }
            if (HouseHandicaps.Used)
            {
                sw.Write("[HouseHandicaps]\r\n");
                Writer("Multi2", HouseHandicaps.Multi2);
                Writer("Multi3", HouseHandicaps.Multi3);
                Writer("Multi4", HouseHandicaps.Multi4);
                Writer("Multi5", HouseHandicaps.Multi5);
                Writer("Multi6", HouseHandicaps.Multi6);
                Writer("Multi7", HouseHandicaps.Multi7);
                Writer("Multi8", HouseHandicaps.Multi8);
                sw.Write("\r\n\r\n");
            }
            if (Tunnel.Used)
            {
                sw.Write("[Tunnel]\r\n");
                Writer("Ip", Tunnel.Ip);
                Writer("Port=", Tunnel.Port);
                sw.Write("\r\n\r\n");
            }
            // Others
            {
                List<Other_> other = new List<Other_>()
                { Other1, Other2, Other3, Other4, Other5, Other6, Other7 };
                for (int i = 1; i < 8; i++)
                {
                    if (other[i - 1].Used)
                    {
                        sw.Write("[Other" + i.ToString() + "]\r\n");
                        Writer("Name", other[i - 1].Name);
                        Writer("Side", other[i - 1].Side);
                        Writer("IsSpectator", other[i - 1].IsSpectator);
                        Writer("Color", other[i - 1].Color);
                        Writer("Ip", other[i - 1].Ip);
                        Writer("Port", other[i - 1].Port);
                        sw.Write("\r\n");
                    }
                }
            }
            // Alliances
            {
                List<Alliances_> alliances = new List<Alliances_>()
                {
                    Multi1_Alliances,Multi2_Alliances,Multi3_Alliances,
                    Multi4_Alliances,Multi5_Alliances,Multi6_Alliances,
                    Multi7_Alliances,Multi8_Alliances
                };
                for (int i = 1; i < 8; i++)
                {
                    if (alliances[i - 1].Used)
                    {
                        sw.Write("[Multi" + i.ToString() + "_Alliances]\r\n");
                        Writer("HouseAllyOne", "Multi" + alliances[i - 1].HouseAllyOne.ToString());
                        Writer("HouseAllyTwe", "Multi" + alliances[i - 1].HouseAllyTwe.ToString());
                        Writer("HouseAllyThree", "Multi" + alliances[i - 1].HouseAllyThree.ToString());
                        Writer("HouseAllyFour", "Multi" + alliances[i - 1].HouseAllyFour.ToString());
                        Writer("HouseAllyFive", "Multi" + alliances[i - 1].HouseAllyFive.ToString());
                        Writer("HouseAllySix", "Multi" + alliances[i - 1].HouseAllySix.ToString());
                        Writer("HouseAllySeven", "Multi" + alliances[i - 1].HouseAllySeven.ToString());
                        sw.Write("\r\n");
                    }
                }
            }
            // Clean Cache
            sw.Flush();
            // Close Stream
            sw.Close();
            fs.Close();
        }
        private void Writer(string key, ulong? value)
        {
            if (value != null)
                sw.Write(key + " = " + value.ToString() + "\r\n");
        }
        private void Writer(string key, long? value)
        {
            if (value != null)
                sw.Write(key + " = " + value.ToString() + "\r\n");
        }
        private void Writer(string key, bool? value)
        {
            if (value != null)
            {
                switch (value)
                {
                    case true:
                        sw.Write(key + " = " + "1" + "\r\n");
                        break;
                    case false:
                        sw.Write(key + " = " + "0" + "\r\n");
                        break;
                }

            }
        }
        private void Writer(string key, string value)
        {
            if (value != null && value != "")
                sw.Write(key + " = " + value + "\r\n");
        }
        public class Settings_ // locale settings
        {
            public byte? UnitCount { set; get; }// 初始单位数量
            public byte? GameSpeed { set; get; }// 游戏速度控制 0-6
            public byte? TechLevel { set; get; }// 科技等级1-10
            public byte? AIPlayers { set; get; }// AI玩家数量
            public byte? AIDifficulty { set; get; }// AI难度
            public byte? Side { set; get; }// 作战方-国家
            public byte? Color { set; get; }// 作战方所属颜色
            public byte? DifficultyModeComputer { set; get; }// 计算机难度模式
            public byte? DifficultyModeHuman { set; get; }// 人类难度模式
            public byte? PlayerCount { set; get; }// 游戏者数量
            public byte? GameMode { set; get; }// 游戏模式
            public uint? Credits { set; get; }// 初始资金
            public ulong? GameID { set; get; }// 游戏ID--?
            public ulong? Seed { set; get; }// --?
            public long? Port { set; get; }// --?
            public bool? ShortGame { set; get; }// 快速游戏
            public bool? Creates { set; get; }// 升级工具箱
            public bool? AlliesAllowed { set; get; }// 允许游戏中结萌
            public bool? MultiEngineer { set; get; }// 多位攻城狮
            public bool? MCVRedeploy { set; get; }// MCV可重新部署
            public bool? FogOfWar { set; get; }// 启用战争迷雾 注:战争迷雾不同于黑幕..战争迷雾透光
            public bool? BridgeDestroy { set; get; }// 桥梁可被破坏
            public bool? AutoDeployMCV { set; get; }// 自动部署MCV--?
            public bool? SkipScoreScreen { set; get; }// 跳过评分屏
            public bool? IsSinglePlayer { set; get; }// 是单人游戏
            public bool? Firestorm { set; get; }// 火风暴--?
            public bool? BuildOffAlly { set; get; }// 可在萌友旁建造
            public bool? IsSpectator { set; get; }// 是T.E.O.T.S.Y.
            public bool? Bases { set; get; }// 基地--?
            public bool? SidebarHack { set; get; }// 边栏hack--?
            public bool? Host { set; get; }// 是主机
            public bool? Superweapons { set; get; }// 炒鸡武器
            public bool? AttackNeutralUnits { set; get; }// 攻击中立单位
            public bool? LoadSaveGame { set; get; }// 是否加载已储存游戏
            public string Scenario { set; get; }// 设置场景(游戏地图文件)
            public string Name { set; get; }// 游戏者名
            public string CustomLoadScreen { set; get; }// 加载自定义载入画面--?
            public string UIGameMode { set; get; }// 
            public string UIMapName { set; get; }//
            public string MapHash { set; get; }//
            public string SaveGameName { set; get; }// 要加载的以保存的存档名

        }
        public class SpawnLocations_ // spawn set
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public short? Multi1
            {
                set
                {
                    Used_ = true;
                    Multi1_ = value;
                }
                get => Multi1_;
            }
            private short? Multi1_;
            public short? Multi2
            {
                set
                {
                    Used_ = true;
                    Multi2_ = value;
                }
                get => Multi2_;
            }
            private short? Multi2_;
            public short? Multi3
            {
                set
                {
                    Used_ = true;
                    Multi3_ = value;
                }
                get => Multi3_;
            }
            private short? Multi3_;
            public short? Multi4
            {
                set
                {
                    Used_ = true;
                    Multi4_ = value;
                }
                get => Multi4_;
            }
            private short? Multi4_;
            public short? Multi5
            {
                set
                {
                    Used_ = true;
                    Multi5_ = value;
                }
                get => Multi5_;
            }
            private short? Multi5_;
            public short? Multi6
            {
                set
                {
                    Used_ = true;
                    Multi6_ = value;
                }
                get => Multi6_;
            }
            private short? Multi6_;
            public short? Multi7
            {
                set
                {
                    Used_ = true;
                    Multi7_ = value;
                }
                get => Multi7_;
            }
            private short? Multi7_;
            public short? Multi8
            {
                set
                {
                    Used_ = true;
                    Multi8_ = value;
                }
                get => Multi8_;
            }
            private short? Multi8_;
            public SpawnLocations_()
            {
                Used_ = false;
                Multi1_ = null;
                Multi2_ = null;
                Multi3_ = null;
                Multi4_ = null;
                Multi5_ = null;
                Multi6_ = null;
                Multi7_ = null;
                Multi8_ = null;
            }
        }
        public class HouseCountries_
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public short? Multi2
            {
                set
                {
                    Used_ = true;
                    Multi2_ = value;
                }
                get => Multi2_;
            }
            private short? Multi2_;
            public short? Multi3
            {
                set
                {
                    Used_ = true;
                    Multi3_ = value;
                }
                get => Multi3_;
            }
            private short? Multi3_;
            public short? Multi4
            {
                set
                {
                    Used_ = true;
                    Multi4_ = value;
                }
                get => Multi4_;
            }
            private short? Multi4_;
            public short? Multi5
            {
                set
                {
                    Used_ = true;
                    Multi5_ = value;
                }
                get => Multi5_;
            }
            private short? Multi5_;
            public short? Multi6
            {
                set
                {
                    Used_ = true;
                    Multi6_ = value;
                }
                get => Multi6_;
            }
            private short? Multi6_;
            public short? Multi7
            {
                set
                {
                    Used_ = true;
                    Multi7_ = value;
                }
                get => Multi7_;
            }
            private short? Multi7_;
            public short? Multi8
            {
                set
                {
                    Used_ = true;
                    Multi8_ = value;
                }
                get => Multi8_;
            }
            private short? Multi8_;
            public HouseCountries_()
            {
                Used_ = false;
                Multi2_ = null;
                Multi3_ = null;
                Multi4_ = null;
                Multi5_ = null;
                Multi6_ = null;
                Multi7_ = null;
                Multi8_ = null;
            }
        }
        public class HouseColors_
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public short? Multi2
            {
                set
                {
                    Used_ = true;
                    Multi2_ = value;
                }
                get => Multi2_;
            }
            private short? Multi2_;
            public short? Multi3
            {
                set
                {
                    Used_ = true;
                    Multi3_ = value;
                }
                get => Multi3_;
            }
            private short? Multi3_;
            public short? Multi4
            {
                set
                {
                    Used_ = true;
                    Multi4_ = value;
                }
                get => Multi4_;
            }
            private short? Multi4_;
            public short? Multi5
            {
                set
                {
                    Used_ = true;
                    Multi5_ = value;
                }
                get => Multi5_;
            }
            private short? Multi5_;
            public short? Multi6
            {
                set
                {
                    Used_ = true;
                    Multi6_ = value;
                }
                get => Multi6_;
            }
            private short? Multi6_;
            public short? Multi7
            {
                set
                {
                    Used_ = true;
                    Multi7_ = value;
                }
                get => Multi7_;
            }
            private short? Multi7_;
            public short? Multi8
            {
                set
                {
                    Used_ = true;
                    Multi8_ = value;
                }
                get => Multi8_;
            }
            private short? Multi8_;
            public HouseColors_()
            {
                Used_ = false;
                Multi2_ = null;
                Multi3_ = null;
                Multi4_ = null;
                Multi5_ = null;
                Multi6_ = null;
                Multi7_ = null;
                Multi8_ = null;
            }
        }
        public class HouseHandicaps_
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public short? Multi2
            {
                set
                {
                    Used_ = true;
                    Multi2_ = value;
                }
                get => Multi2_;
            }
            private short? Multi2_;
            public short? Multi3
            {
                set
                {
                    Used_ = true;
                    Multi3_ = value;
                }
                get => Multi3_;
            }
            private short? Multi3_;
            public short? Multi4
            {
                set
                {
                    Used_ = true;
                    Multi4_ = value;
                }
                get => Multi4_;
            }
            private short? Multi4_;
            public short? Multi5
            {
                set
                {
                    Used_ = true;
                    Multi5_ = value;
                }
                get => Multi5_;
            }
            private short? Multi5_;
            public short? Multi6
            {
                set
                {
                    Used_ = true;
                    Multi6_ = value;
                }
                get => Multi6_;
            }
            private short? Multi6_;
            public short? Multi7
            {
                set
                {
                    Used_ = true;
                    Multi7_ = value;
                }
                get => Multi7_;
            }
            private short? Multi7_;
            public short? Multi8
            {
                set
                {
                    Used_ = true;
                    Multi8_ = value;
                }
                get => Multi8_;
            }
            private short? Multi8_;
            public HouseHandicaps_()
            {
                Used_ = false;
                Multi2_ = null;
                Multi3_ = null;
                Multi4_ = null;
                Multi5_ = null;
                Multi6_ = null;
                Multi7_ = null;
                Multi8_ = null;
            }
        }
        public class Tunnel_
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public string Ip
            {
                set
                {
                    Used_ = true;
                    Ip_ = value;
                }
                get => Ip_;
            }
            private string Ip_;
            public ushort Port
            {
                set
                {
                    Used_ = true;
                    Port_ = value;
                }
                get => Port_;
            }
            private ushort Port_;
            public Tunnel_()
            {
                Used_ = false;
            }
        }
        public class Other_
        {
            public bool Used { get => Used_; }
            private bool Used_;
            public string Name
            {
                set
                {
                    Used_ = true;
                    Name_ = value;
                }
                get => Name_;
            }
            private string Name_;
            public ushort Side
            {
                set
                {
                    Used_ = true;
                    Side_ = value;
                }
                get => Side_;
            }
            private ushort Side_;
            public bool IsSpectator
            {
                set
                {
                    Used_ = true;
                    IsSpectator_ = value;
                }
                get => IsSpectator_;
            }
            private bool IsSpectator_;
            public ushort Color
            {
                set
                {
                    Used_ = true;
                    Color_ = value;
                }
                get => Color_;
            }
            private ushort Color_;
            public string Ip
            {
                set
                {
                    Used_ = true;
                    Ip_ = value;
                }
                get => Ip_;
            }
            private string Ip_;
            public ushort Port
            {
                set
                {
                    Used_ = true;
                    Port_ = value;
                }
                get => Port_;
            }
            private ushort Port_;
            public Other_()
            {
                Used_ = false;
                Ip_ = "0.0.0.0";
            }
        }
        public class Alliances_ // Multi*_Alliances
        {
            public bool Used { set; get; } // is include
            public ushort? HouseAllyOne { get => HouseAllyOne_; }
            private ushort? HouseAllyOne_;
            public ushort? HouseAllyTwe { get => HouseAllyTwe_; }
            private ushort? HouseAllyTwe_;
            public ushort? HouseAllyThree { get => HouseAllyThree_; }
            private ushort? HouseAllyThree_;
            public ushort? HouseAllyFour { get => HouseAllyFour_; }
            private ushort? HouseAllyFour_;
            public ushort? HouseAllyFive { get => HouseAllyFive_; }
            private ushort? HouseAllyFive_;
            public ushort? HouseAllySix { get => HouseAllySix_; }
            private ushort? HouseAllySix_;
            public ushort? HouseAllySeven { get => HouseAllySeven_; }
            private ushort? HouseAllySeven_;
            public Alliances_()
            {
                HouseAllyOne_ = null;
                HouseAllyTwe_ = null;
                HouseAllyThree_ = null;
                HouseAllyFour_ = null;
                HouseAllyFive_ = null;
                HouseAllySix_ = null;
                HouseAllySeven_ = null;
                Used = false;
            }
            public void Add(int player)
            {
                Used = true;
                byte Player = (byte)player;
                if (HouseAllyOne != null)
                    HouseAllyOne_ = Player;
                else if (HouseAllyTwe != null)
                    HouseAllyTwe_ = Player;
                else if (HouseAllyThree != null)
                    HouseAllyThree_ = Player;
                else if (HouseAllyFour != null)
                    HouseAllyFour_ = Player;
                else if (HouseAllyFive != null)
                    HouseAllyFive_ = Player;
                else if (HouseAllySix != null)
                    HouseAllySix_ = Player;
                else if (HouseAllySeven != null)
                    HouseAllySeven_ = Player;
                else throw new AllyOverFlowException("Alliances溢出");
            }
        }

        [System.Serializable]
        public class AllyOverFlowException : System.Exception
        {
            public AllyOverFlowException() { }
            public AllyOverFlowException(string message) : base(message) { }
            public AllyOverFlowException(string message, System.Exception inner) : base(message, inner) { }
            protected AllyOverFlowException(
              System.Runtime.Serialization.SerializationInfo info,
              System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
        }
    }
}
/* 意义不明配置项(键):
 * MultipleFactory
 * SharedControl
 * FrameSendRate
 * MaxAhead
 * PreCalcMaxAhead
 * PreCalcFrameRate
 * Protocol
 * RunAutoSS
 * AutoSaveGame
 * TeamName
 * AimableSams
 * IntegrateMumble
 * AttackNeutralUnits
 * ScrapMetal
 * QuickMatch
 * CoachMode
 * AutoSurrender
 *
 * Spawn1
 * Spawn2
 * Spawn3
 * Spawn4
 * Spawn5
 * Spawn6
 * Spawn7
 * Spawn8
 *
 * AllyBySpawnLocation
 * UseGraphicsPatch
 * ForceLowestDetailLevel
 * InvisibleSouthDisruptorWave
 * NoCD
 * SetProcessAffinityMask
 * SingleProcAffinity
 * 
 * debugplayer
 * debugplayer2
 */