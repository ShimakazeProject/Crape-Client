using System;
using System.IO;

namespace Crape_Client.CrapeClientCore
{
    /// <summary>
    /// SPAWN.INI class
    /// </summary>
    public class Spawn
    {
        /// <summary>
        /// SPAWN.INI Path
        /// </summary>
        public string SpawnPath { set; get; }//= AppDomain.CurrentDomain.BaseDirectory+"spawn.ini";
        // 
        public Other Other1 = new Other();
        public Other Other2 = new Other();
        public Other Other3 = new Other();
        public Other Other4 = new Other();
        public Other Other5 = new Other();
        public Other Other6 = new Other();
        public Other Other7 = new Other();
        public Alliances Multi1_Alliances = new Alliances();
        public Alliances Multi2_Alliances = new Alliances();
        public Alliances Multi3_Alliances = new Alliances();
        public Alliances Multi4_Alliances = new Alliances();
        public Alliances Multi5_Alliances = new Alliances();
        public Alliances Multi6_Alliances = new Alliances();
        public Alliances Multi7_Alliances = new Alliances();
        public Alliances Multi8_Alliances = new Alliances();

        public SettingsA Settings = new SettingsA();
        public SpawnLocationsA SpawnLocations = new SpawnLocationsA();
        public HouseCountriesA HouseCountries = new HouseCountriesA();
        public HouseColorsA HouseColors = new HouseColorsA();
        public HouseHandicapsA HouseHandicaps = new HouseHandicapsA();
        public TunnelA Tunnel = new TunnelA();
        /// <summary>
        /// 自定义spawn.ini地址构造函数
        /// </summary>
        /// <param name="IniPath">spawn.ini地址</param>
        public Spawn(string IniPath) { SpawnPath = IniPath; }
        /// <summary>
        /// 构造函数 SpawnPath = Global.Globals.LocalPath + "spawn.ini"
        /// </summary>
        public Spawn() { SpawnPath = Global.Globals.LocalPath + "spawn.ini"; }
        /// <summary>
        /// writer the spawn.ini
        /// </summary>
        public void Write()
        {
            // Open Stream
            FileStream fs = new FileStream(SpawnPath, FileMode.Create);
            StreamWriter sw = new StreamWriter(fs);
            // Write 

            sw.Write("; generated by Crape Client\r\n");
            // sw.Write("; 内容\r\n");
            #region Settings
            sw.Write("[Settings]\r\n");
            if (Settings.Name != null)
                sw.Write("Name=" + Settings.Name + "\r\n");
            if (Settings.CustomLoadScreen != null)
                sw.Write("CustomLoadScreen=" + Settings.CustomLoadScreen + "\r\n");
            if (Settings.SaveGameName != null)
                sw.Write("SaveGameName=" + Settings.SaveGameName + "\r\n");
            if (Settings.UIGameMode != null)
                sw.Write("UIGameMode=" + Settings.UIGameMode + "\r\n");
            if (Settings.UIMapName != null)
                sw.Write("UIMapName=" + Settings.UIMapName + "\r\n");
            if (Settings.MapHash != null)
                sw.Write("MapHash=" + Settings.MapHash + "\r\n");
            if (Settings.Scenario != null)
                sw.Write("Scenario=" + Settings.Scenario + "\r\n");

            if (Settings.UnitCount != null)
                sw.Write("UnitCount=" + Convert.ToString(Settings.UnitCount) + "\r\n");
            if (Settings.GameSpeed != null)
                sw.Write("GameSpeed=" + Convert.ToString(Settings.GameSpeed) + "\r\n");
            if (Settings.TechLevel != null)
                sw.Write("TechLevel=" + Convert.ToString(Settings.TechLevel) + "\r\n");
            if (Settings.AIPlayers != null)
                sw.Write("AIPlayers=" + Convert.ToString(Settings.AIPlayers) + "\r\n");
            if (Settings.AIDifficulty != null)
                sw.Write("AIDifficulty=" + Convert.ToString(Settings.AIDifficulty) + "\r\n");
            if (Settings.Side != null)
                sw.Write("Side=" + Convert.ToString(Settings.Side) + "\r\n");
            if (Settings.Color != null)
                sw.Write("Color=" + Convert.ToString(Settings.Color) + "\r\n");
            if (Settings.DifficultyModeComputer != null)
                sw.Write("DifficultyModeComputer=" + Convert.ToString(Settings.DifficultyModeComputer) + "\r\n");
            if (Settings.DifficultyModeHuman != null)
                sw.Write("DifficultyModeHuman=" + Convert.ToString(Settings.DifficultyModeHuman) + "\r\n");
            if (Settings.PlayerCount != null)
                sw.Write("PlayerCount=" + Convert.ToString(Settings.PlayerCount) + "\r\n");
            if (Settings.GameMode != null)
                sw.Write("GameMode=" + Convert.ToString(Settings.GameMode) + "\r\n");
            if (Settings.Credits != null)
                sw.Write("Credits=" + Convert.ToString(Settings.Credits) + "\r\n");
            if (Settings.GameID != null)
                sw.Write("GameID=" + Convert.ToString(Settings.GameID) + "\r\n");
            if (Settings.Seed != null)
                sw.Write("Seed=" + Convert.ToString(Settings.Seed) + "\r\n");
            if (Settings.Port != null)
                sw.Write("Port=" + Convert.ToString(Settings.Port) + "\r\n");

            if (Settings.LoadSaveGame == true) sw.Write("LoadSaveGame=1\r\n");

            if (Settings.ShortGame == true) sw.Write("ShortGame=1\r\n");

            if (Settings.Creates == true) sw.Write("Creates=1\r\n");

            if (Settings.AlliesAllowed == true) sw.Write("AlliesAllowed=1\r\n");

            if (Settings.MultiEngineer == true) sw.Write("MultiEngineer=1\r\n");

            if (Settings.MCVRedeploy == true) sw.Write("MCVRedeploy=1\r\n");
            if (Settings.MCVRedeploy == false) sw.Write("MCVRedeploy=0\r\n");
            if (Settings.FogOfWar == true) sw.Write("FogOfWar=1\r\n");
            if (Settings.FogOfWar == false) sw.Write("FogOfWar=0\r\n");
            if (Settings.BridgeDestroy == true) sw.Write("BridgeDestroy=1\r\n");

            if (Settings.AutoDeployMCV == true) sw.Write("AutoDeployMCV=1\r\n");

            if (Settings.SkipScoreScreen == true) sw.Write("SkipScoreScreen=1\r\n");

            if (Settings.IsSinglePlayer == true) sw.Write("IsSinglePlayer=1\r\n");
            if (Settings.IsSinglePlayer == false) sw.Write("IsSinglePlayer=0\r\n");
            if (Settings.Firestorm == true) sw.Write("Firestorm=1\r\n");
            if (Settings.Firestorm == false) sw.Write("Firestorm=0\r\n");
            if (Settings.BuildOffAlly == true) sw.Write("BuildOffAlly=1\r\n");
            if (Settings.BuildOffAlly == false) sw.Write("BuildOffAlly=0\r\n");
            if (Settings.IsSpectator == true) sw.Write("IsSpectator=1\r\n");
            if (Settings.IsSpectator == false) sw.Write("IsSpectator=0\r\n");
            if (Settings.Bases == true) sw.Write("Bases=1\r\n");
            if (Settings.Bases == false) sw.Write("Bases=0\r\n");
            if (Settings.SidebarHack == true) sw.Write("SidebarHack=1\r\n");
            if (Settings.SidebarHack == false) sw.Write("SidebarHack=0\r\n");
            if (Settings.Host == true) sw.Write("Host=1\r\n");
            if (Settings.Host == false) sw.Write("Host=0\r\n");
            if (Settings.Superweapons == true) sw.Write("Superweapons=1\r\n");
            if (Settings.Superweapons == false) sw.Write("Superweapons=0\r\n");
            if (Settings.AttackNeutralUnits == true) sw.Write("AttackNeutralUnits=1\r\n");
            if (Settings.AttackNeutralUnits == false) sw.Write("AttackNeutralUnits=0\r\n");
            sw.Write("\r\n\r\n\r\n");
            #endregion

            #region AISettings
            if (SpawnLocations.Multi1 != null && 
                SpawnLocations.Multi2 != null && 
                SpawnLocations.Multi3 != null && 
                SpawnLocations.Multi4 != null && 
                SpawnLocations.Multi5 != null && 
                SpawnLocations.Multi6 != null && 
                SpawnLocations.Multi7 != null )
                sw.Write("[SpawnLocations]\r\n");
            if (SpawnLocations.Multi1 != null) sw.Write("Multi1=" + Convert.ToString(SpawnLocations.Multi1) + "\r\n");
            if (SpawnLocations.Multi2 != null) sw.Write("Multi2=" + Convert.ToString(SpawnLocations.Multi2) + "\r\n");
            if (SpawnLocations.Multi3 != null) sw.Write("Multi3=" + Convert.ToString(SpawnLocations.Multi3) + "\r\n");
            if (SpawnLocations.Multi4 != null) sw.Write("Multi4=" + Convert.ToString(SpawnLocations.Multi4) + "\r\n");
            if (SpawnLocations.Multi5 != null) sw.Write("Multi5=" + Convert.ToString(SpawnLocations.Multi5) + "\r\n");
            if (SpawnLocations.Multi6 != null) sw.Write("Multi6=" + Convert.ToString(SpawnLocations.Multi6) + "\r\n");
            if (SpawnLocations.Multi7 != null) sw.Write("Multi7=" + Convert.ToString(SpawnLocations.Multi7) + "\r\n");
            if (SpawnLocations.Multi8 != null) sw.Write("Multi8=" + Convert.ToString(SpawnLocations.Multi8) + "\r\n");
            sw.Write("\r\n\r\n\r\n");
            // Countries
            if (HouseCountries.Multi8 != null &&
                HouseCountries.Multi2 != null &&
                HouseCountries.Multi3 != null &&
                HouseCountries.Multi4 != null &&
                HouseCountries.Multi5 != null &&
                HouseCountries.Multi6 != null &&
                HouseCountries.Multi7 != null)
                sw.Write("[HouseCountries]\r\n");
            if (HouseCountries.Multi2 != null) sw.Write("Multi2=" + Convert.ToString(HouseCountries.Multi2) + "\r\n");
            if (HouseCountries.Multi3 != null) sw.Write("Multi3=" + Convert.ToString(HouseCountries.Multi3) + "\r\n");
            if (HouseCountries.Multi4 != null) sw.Write("Multi4=" + Convert.ToString(HouseCountries.Multi4) + "\r\n");
            if (HouseCountries.Multi5 != null) sw.Write("Multi5=" + Convert.ToString(HouseCountries.Multi5) + "\r\n");
            if (HouseCountries.Multi6 != null) sw.Write("Multi6=" + Convert.ToString(HouseCountries.Multi6) + "\r\n");
            if (HouseCountries.Multi7 != null) sw.Write("Multi7=" + Convert.ToString(HouseCountries.Multi7) + "\r\n");
            if (HouseCountries.Multi8 != null) sw.Write("Multi8=" + Convert.ToString(HouseCountries.Multi8) + "\r\n");
            sw.Write("\r\n\r\n\r\n");
            // Colors
            if (HouseColors.Multi8 != null &&
                HouseColors.Multi2 != null &&
                HouseColors.Multi3 != null &&
                HouseColors.Multi4 != null &&
                HouseColors.Multi5 != null &&
                HouseColors.Multi6 != null &&
                HouseColors.Multi7 != null)
                sw.Write("[HouseColors]\r\n");
            if (HouseColors.Multi2 != null) sw.Write("Multi2=" + Convert.ToString(HouseColors.Multi2) + "\r\n");
            if (HouseColors.Multi3 != null) sw.Write("Multi3=" + Convert.ToString(HouseColors.Multi3) + "\r\n");
            if (HouseColors.Multi4 != null) sw.Write("Multi4=" + Convert.ToString(HouseColors.Multi4) + "\r\n");
            if (HouseColors.Multi5 != null) sw.Write("Multi5=" + Convert.ToString(HouseColors.Multi5) + "\r\n");
            if (HouseColors.Multi6 != null) sw.Write("Multi6=" + Convert.ToString(HouseColors.Multi6) + "\r\n");
            if (HouseColors.Multi7 != null) sw.Write("Multi7=" + Convert.ToString(HouseColors.Multi7) + "\r\n");
            if (HouseColors.Multi8 != null) sw.Write("Multi8=" + Convert.ToString(HouseColors.Multi8) + "\r\n");
            sw.Write("\r\n\r\n\r\n");
            // Handicaps
            if (HouseHandicaps.Multi8 != null &&
                HouseHandicaps.Multi2 != null &&
                HouseHandicaps.Multi3 != null &&
                HouseHandicaps.Multi4 != null &&
                HouseHandicaps.Multi5 != null &&
                HouseHandicaps.Multi6 != null &&
                HouseHandicaps.Multi7 != null)
                sw.Write("[HouseHandicaps]\r\n");
            if (HouseHandicaps.Multi2 != null) sw.Write("Multi2=" + Convert.ToString(HouseHandicaps.Multi2) + "\r\n");
            if (HouseHandicaps.Multi3 != null) sw.Write("Multi3=" + Convert.ToString(HouseHandicaps.Multi3) + "\r\n");
            if (HouseHandicaps.Multi4 != null) sw.Write("Multi4=" + Convert.ToString(HouseHandicaps.Multi4) + "\r\n");
            if (HouseHandicaps.Multi5 != null) sw.Write("Multi5=" + Convert.ToString(HouseHandicaps.Multi5) + "\r\n");
            if (HouseHandicaps.Multi6 != null) sw.Write("Multi6=" + Convert.ToString(HouseHandicaps.Multi6) + "\r\n");
            if (HouseHandicaps.Multi7 != null) sw.Write("Multi7=" + Convert.ToString(HouseHandicaps.Multi7) + "\r\n");
            if (HouseHandicaps.Multi8 != null) sw.Write("Multi8=" + Convert.ToString(HouseHandicaps.Multi8) + "\r\n");
            sw.Write("\r\n\r\n\r\n");
            #endregion

            // Servers Setting
            if (Tunnel.HaveTunnel)
            {
                sw.Write("[Tunnel]\r\n");
                sw.Write("Ip=" + Tunnel.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Tunnel.Port) + "\r\n");
                sw.Write("\r\n\r\n\r\n");
            }

            #region Other Player
            if (Other1.a)
            {
                sw.Write("[Other1]\r\n");
                sw.Write("Name=" + Other1.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other1.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other1.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other1.Color) + "\r\n");
                sw.Write("Ip=" + Other1.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other1.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other2.a)
            {
                sw.Write("[Other2]\r\n");
                sw.Write("Name=" + Other2.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other2.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other2.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other2.Color) + "\r\n");
                sw.Write("Ip=" + Other2.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other2.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other3.a)
            {
                sw.Write("[Other3]\r\n");
                sw.Write("Name=" + Other3.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other3.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other3.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other3.Color) + "\r\n");
                sw.Write("Ip=" + Other3.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other3.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other4.a)
            {
                sw.Write("[Other4]\r\n");
                sw.Write("Name=" + Other4.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other4.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other4.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other4.Color) + "\r\n");
                sw.Write("Ip=" + Other4.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other4.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other5.a)
            {
                sw.Write("[Other5]\r\n");
                sw.Write("Name=" + Other5.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other5.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other5.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other5.Color) + "\r\n");
                sw.Write("Ip=" + Other5.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other5.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other6.a)
            {
                sw.Write("[Other6]\r\n");
                sw.Write("Name=" + Other6.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other6.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other6.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other6.Color) + "\r\n");
                sw.Write("Ip=" + Other6.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other6.Port) + "\r\n");
                sw.Write("\r\n");
            }
            if (Other7.a)
            {
                sw.Write("[Other7]\r\n");
                sw.Write("Name=" + Other7.Name + "\r\n");
                sw.Write("Side=" + Convert.ToString(Other7.Side) + "\r\n");
                sw.Write("IsSpectator=" + Convert.ToString(Other7.IsSpectator) + "\r\n");
                sw.Write("Color=" + Convert.ToString(Other7.Color) + "\r\n");
                sw.Write("Ip=" + Other7.Ip + "\r\n");
                sw.Write("Port=" + Convert.ToString(Other7.Port) + "\r\n");
                sw.Write("\r\n");
            }
            #endregion

            #region Player Alliances
            if (Multi1_Alliances.a)
            {
                sw.Write("[Multi1_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi1_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi1_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi1_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi1_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi1_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi1_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi1_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi2_Alliances.a)
            {
                sw.Write("[Multi2_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi2_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi2_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi2_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi2_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi2_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi2_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi2_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi3_Alliances.a)
            {
                sw.Write("[Multi3_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi3_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi3_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi3_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi3_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi3_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi3_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi3_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi4_Alliances.a)
            {
                sw.Write("[Multi4_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi4_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi4_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi4_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi4_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi4_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi4_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi4_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi5_Alliances.a)
            {
                sw.Write("[Multi5_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi5_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi5_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi5_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi5_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi5_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi5_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi5_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi6_Alliances.a)
            {
                sw.Write("[Multi6_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi6_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi6_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi6_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi6_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi6_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi6_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi6_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi7_Alliances.a)
            {
                sw.Write("[Multi7_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi7_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi7_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi7_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi7_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi7_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi7_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi7_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            if (Multi8_Alliances.a)
            {
                sw.Write("[Multi8_Alliances]\r\n");
                sw.Write("HouseAllyOne=" + Convert.ToString(Multi8_Alliances.HouseAllyOne) + "\r\n");
                sw.Write("HouseAllyTwe=" + Convert.ToString(Multi8_Alliances.HouseAllyTwe) + "\r\n");
                sw.Write("HouseAllyThree=" + Convert.ToString(Multi8_Alliances.HouseAllyThree) + "\r\n");
                sw.Write("HouseAllyFour=" + Convert.ToString(Multi8_Alliances.HouseAllyFour) + "\r\n");
                sw.Write("HouseAllyFive=" + Convert.ToString(Multi8_Alliances.HouseAllyFive) + "\r\n");
                sw.Write("HouseAllySix=" + Convert.ToString(Multi8_Alliances.HouseAllySix) + "\r\n");
                sw.Write("HouseAllySeven=" + Convert.ToString(Multi8_Alliances.HouseAllySeven) + "\r\n");
                sw.Write("\r\n");
            }
            #endregion
            //*/
            // Clean Cache
            sw.Flush();
            // Close Stream
            sw.Close();
            fs.Close();
        }

        #region Settings

        /// <summary>
        /// 主要设定
        /// </summary>
        public class SettingsA // locale settings
        {
            public Byte? UnitCount{ set; get; }// 初始单位数量
            public Byte? GameSpeed{ set; get; }// 游戏速度控制 0-6
            public Byte? TechLevel{ set; get; }// 科技等级1-10
            public Byte? AIPlayers{ set; get; }// AI玩家数量
            public Byte? AIDifficulty{ set; get; }// AI难度
            public Byte? Side{ set; get; }// 作战方-国家
            public Byte? Color{ set; get; }// 作战方所属颜色
            public Byte? DifficultyModeComputer{ set; get; }// 计算机难度模式
            public Byte? DifficultyModeHuman{ set; get; }// 人类难度模式
            public Byte? PlayerCount{ set; get; }// 游戏者数量
            public Byte? GameMode{ set; get; }// 游戏模式
            public UInt32? Credits{ set; get; }// 初始资金
            public UInt64? GameID{ set; get; }// 游戏ID--?
            public UInt64? Seed{ set; get; }// --?
            public Int64? Port{ set; get; }// --?
            public Boolean? ShortGame{ set; get; }// 快速游戏
            public Boolean? Creates{ set; get; }// 升级工具箱
            public Boolean? AlliesAllowed{ set; get; }// 允许游戏中结萌
            public Boolean? MultiEngineer{ set; get; }// 多位攻城狮
            public Boolean? MCVRedeploy{ set; get; }// MCV可重新部署
            public Boolean? FogOfWar{ set; get; }// 启用战争迷雾 注:战争迷雾不同于黑幕..战争迷雾透光
            public Boolean? BridgeDestroy{ set; get; }// 桥梁可被破坏
            public Boolean? AutoDeployMCV{ set; get; }// 自动部署MCV--?
            public Boolean? SkipScoreScreen{ set; get; }// 跳过评分屏
            public Boolean? IsSinglePlayer{ set; get; }// 是单人游戏
            public Boolean? Firestorm{ set; get; }// 火风暴--?
            public Boolean? BuildOffAlly{ set; get; }// 可在萌友旁建造
            public Boolean? IsSpectator{ set; get; }// 是T.E.O.T.S.Y.
            public Boolean? Bases{ set; get; }// 基地--?
            public Boolean? SidebarHack{ set; get; }// 边栏hack--?
            public Boolean? Host{ set; get; }// 是主机
            public Boolean? Superweapons{ set; get; }// 炒鸡武器
            public Boolean? AttackNeutralUnits{ set; get; }// 攻击中立单位
            public Boolean? LoadSaveGame{ set; get; }// 是否加载已储存游戏
            public String Scenario{ set; get; }// 设置场景(游戏地图文件)
            public String Name{ set; get; }// 游戏者名
            public String CustomLoadScreen{ set; get; }// 加载自定义载入画面--?
            public String UIGameMode{ set; get; }// 
            public String UIMapName{ set; get; }//
            public String MapHash{ set; get; }//
            public String SaveGameName{ set; get; }// 要加载的以保存的存档名

        }
        /// <summary>
        /// 玩家初始地点设置
        /// </summary>
        public class SpawnLocationsA // spawn set
        {
            public Byte? Multi1{ set; get; }
            public Byte? Multi2{ set; get; }
            public Byte? Multi3{ set; get; }
            public Byte? Multi4{ set; get; }
            public Byte? Multi5{ set; get; }
            public Byte? Multi6{ set; get; }
            public Byte? Multi7{ set; get; }
            public Byte? Multi8{ set; get; }
        }
        /// <summary>
        /// AI 国家设定
        /// </summary>
        public class HouseCountriesA // AI countrie set
        {
            public Byte? Multi2{ set; get; }
            public Byte? Multi3{ set; get; }
            public Byte? Multi4{ set; get; }
            public Byte? Multi5{ set; get; }
            public Byte? Multi6{ set; get; }
            public Byte? Multi7{ set; get; }
            public Byte? Multi8{ set; get; }
        }
        /// <summary>
        /// AI 颜色设置
        /// </summary>
        public class HouseColorsA // AI colour set
        {
            public Byte? Multi2{ set; get; }
            public Byte? Multi3{ set; get; }
            public Byte? Multi4{ set; get; }
            public Byte? Multi5{ set; get; }
            public Byte? Multi6{ set; get; }
            public Byte? Multi7{ set; get; }
            public Byte? Multi8{ set; get; }
        }
        /// <summary>
        /// AI 困难设置
        /// </summary>
        public class HouseHandicapsA // AI Handicaps
        {
            public Byte? Multi2{ set; get; }
            public Byte? Multi3{ set; get; }
            public Byte? Multi4{ set; get; }
            public Byte? Multi5{ set; get; }
            public Byte? Multi6{ set; get; }
            public Byte? Multi7{ set; get; }
            public Byte? Multi8{ set; get; }
        }
        public class TunnelA // servers config
        {
            public Boolean HaveTunnel{ set; get; } 
            public String Ip{ set; get; }
            public UInt16 Port{ set; get; }

        }
        /// <summary>
        /// 其他玩家设置
        /// </summary>
        public class Other // Other*
        {
            public Boolean a{ set; get; } // is include
            public String Name{ set; get; }
            public Byte? Side{ set; get; }
            public Boolean? IsSpectator{ set; get; }
            public Byte? Color{ set; get; }
            public String Ip{ set; get; }
            public Int64? Port{ set; get; }
            public Other() {
                Ip = "0.0.0.0";
            }
            
        }
        /// <summary>
        /// 玩家结盟设置
        /// </summary>
        public class Alliances // Multi*_Alliances
        {
            public Boolean a{ set; get; } // is include
            public Byte? HouseAllyOne{ set; get; }
            public Byte? HouseAllyTwe{ set; get; }
            public Byte? HouseAllyThree{ set; get; }
            public Byte? HouseAllyFour{ set; get; }
            public Byte? HouseAllyFive{ set; get; }
            public Byte? HouseAllySix{ set; get; }
            public Byte? HouseAllySeven{ set; get; }
        }
        #endregion


    }
}
/* 意义不明配置项(键):
 * MultipleFactory
 * SharedControl
 * FrameSendRate
 * MaxAhead
 * PreCalcMaxAhead
 * PreCalcFrameRate
 * Protocol
 * RunAutoSS
 * AutoSaveGame
 * TeamName
 * AimableSams
 * IntegrateMumble
 * AttackNeutralUnits
 * ScrapMetal
 * QuickMatch
 * CoachMode
 * AutoSurrender
 *
 * Spawn1
 * Spawn2
 * Spawn3
 * Spawn4
 * Spawn5
 * Spawn6
 * Spawn7
 * Spawn8
 *
 * AllyBySpawnLocation
 * UseGraphicsPatch
 * ForceLowestDetailLevel
 * InvisibleSouthDisruptorWave
 * NoCD
 * SetProcessAffinityMask
 * SingleProcAffinity
 * 
 * debugplayer
 * debugplayer2
 */
